# -*- coding: utf-8 -*-
"""CNN.ipynb
Reference
https://iq.opengenus.org/implementing-cnn-python-tensorflow-mnist-data/

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jKc-coKoAfIVg8sDmGxQqgsuLr8ug0fP
"""

import tensorflow as tf
from tensorflow.examples.tutorials.mnist import input_data
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
import numpy as np
import math

mnist = input_data.read_data_sets('/tmp/data',one_hot=True)
n_classes = 10
batch_size = 128

x = tf.placeholder('float',[None,784])
y = tf.placeholder('float')

def conv2d(x, W):
    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding='SAME')
def maxpool2d(x):
    return tf.nn.max_pool(x, ksize=[1,2,2,1], strides=[1, 2, 2, 1], padding='SAME')

weights = {'W_conv1':tf.Variable(tf.random_normal([5,5,1,32])),
                      'W_conv2':tf.Variable(tf.random_normal([5,5,32,64])),
               'W_fc': tf.Variable(tf.random_normal([7*7*64,1024])),
               'out': tf.Variable(tf.random_normal([1024,n_classes]))}
biases = {'b_conv1': tf.Variable(tf.random_normal([ 32])),
               'b_conv2': tf.Variable(tf.random_normal([ 64])),
               'b_fc': tf.Variable(tf.random_normal([ 1024])),
               'out': tf.Variable(tf.random_normal([n_classes]))}
X_tensor = tf.reshape(x, [-1, 28, 28, 1])

"""Convolutional layer using our function"""

conv1 = tf.nn.relu( conv2d(X_tensor, weights['W_conv1'])+ biases['b_conv1'])
print(conv1.shape)
    # Max Pooling (down-sampling)
pool1 = maxpool2d(conv1)
print(pool1.shape)
    # Convolution Layer
conv2 = tf.nn.relu(conv2d(pool1, weights['W_conv2']) + biases['b_conv2'])
print(conv2.shape)
    # Max Pooling (down-sampling)
pool2 = maxpool2d(conv2)
print(pool2.shape)

fc = tf.reshape(pool2,[-1,7*7*64])
fc = tf.nn.relu(tf.matmul(fc,weights['W_fc'])+biases['b_fc'])
    #uncomment below line to use dropout
    #fc = tf.nn.dropout(fc,keep_rate)

output = tf.matmul(fc, weights['out'])+biases['out']

pred = output
cost = tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=pred,labels=y))
optimizer = tf.train.AdamOptimizer().minimize(cost)

hm_epochs = 10

sess = tf.Session()
sess.run(tf.global_variables_initializer())

for epoch in range(hm_epochs):
    epoch_loss = 0
    for _ in range(int(mnist.train.num_examples/batch_size)):
        epoch_x, epoch_y = mnist.train.next_batch(batch_size)

        sess.run(optimizer, feed_dict={x: epoch_x, y: epoch_y})
            
        epoch_loss = sess.run(cost, feed_dict={x: epoch_x, y: epoch_y})
    print('Epoch', epoch, 'completed out of', hm_epochs, 'loss:', epoch_loss)

correct = tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))
accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
print("Accuracy", sess.run(accuracy, feed_dict={x: mnist.test.images, y: mnist.test.labels}))
W_conv1 = sess.run(weights['W_conv1'])
b_conv1 = sess.run(biases['b_conv1'])
print('bconv1f')
print(b_conv1)
print('++++++')
W_conv2 = sess.run(weights['W_conv2'])
print(W_conv2.shape, 'layer 2 shape')

fig, axes = plt.subplots(4, 8)
index =0
for ax in  axes.ravel():

    w1 = W_conv1[:, :, :, index:index + 1]

    w1 = np.array(w1)
    w1 = np.reshape(w1, (5, 5))

    print(w1.shape)
    w1 = MinMaxScaler(feature_range=(0, 255)).fit_transform(w1)
    ax.matshow(w1, cmap=plt.get_cmap('gray'))
    ax.set_xticks(())
    ax.set_yticks(())
    index = index+1
    



plt.show()

imageToUse = mnist.test.images[45]
plt.imshow(np.reshape(imageToUse,[28,28]), interpolation="nearest", cmap="gray")
plt.show()

layer1 = sess.run(conv1,feed_dict={x:np.reshape(imageToUse,[1,784],order='F')})

filters = layer1.shape[3]
index = 0
while(index<filters-1):
    fig, axes = plt.subplots(4, 4)
    for ax in axes.ravel():

        ax.matshow(layer1[0,:,:,index],cmap=plt.get_cmap('gray'))
        ax.set_xticks(())
        ax.set_yticks(())
        index = index+1

    plt.show()

layer2 = sess.run(conv2,feed_dict={x:np.reshape(imageToUse,[1,784],order='F')})

filters = layer2.shape[3]
index = 0
while(index<filters-1):
    fig, axes = plt.subplots(4, 8)
    for ax in axes.ravel():

        ax.matshow(layer2[0,:,:,index],cmap=plt.get_cmap('gray'))
        ax.set_xticks(())
        ax.set_yticks(())
        index = index+1

    plt.show()